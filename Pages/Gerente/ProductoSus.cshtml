@page
@model ProyectoProcesosExperienciaV1.Pages.Gerente.ProductoSusModel
@{
    ViewData["Title"] = "Gesti√≥n de Productos";
}
<link rel="stylesheet" href="~/css/gerente-producto.css" />
<link rel="stylesheet" href="~/css/buscador-mejorado.css" />

<div class="container mt-4">
    <!-- üß≠ Migas de pan -->
    <nav aria-label="breadcrumb" class="breadcrumb-wrapper mb-3">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/Gerente/Dashboard">Inicio</a></li>
            <li class="breadcrumb-item active" aria-current="page">Productos</li>
        </ol>
    </nav>

    <h2 class="mb-4">Registrar Producto</h2>

    @if (TempData["Mensaje"] != null)
    {
        <div class="alert alert-success">@TempData["Mensaje"]</div>
    }

    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger">@TempData["Error"]</div>
    }

    <form method="post" class="row g-3">
        <div class="col-md-3">
            <label class="form-label">ID Producto</label>
            <input type="text" class="form-control" asp-for="NuevoProducto.ID_Producto" placeholder="Ej: PRD001" />
        </div>
        <div class="col-md-4">
            <label class="form-label">Nombre</label>
            <input type="text" class="form-control" asp-for="NuevoProducto.Nombre" placeholder="Ej: L√°piz HB" />
        </div>
        <div class="col-md-5">
            <label class="form-label">Descripci√≥n</label>
            <input type="text" class="form-control" asp-for="NuevoProducto.Descripcion" placeholder="Ej: L√°piz de grafito HB para dibujo t√©cnico" />
        </div>
        <div class="col-md-4">
            <label class="form-label">Categor√≠a</label>
            <select class="form-select" asp-for="NuevoProducto.fkID_Categoria">
                <option value="">Seleccionar...</option>
                @foreach (var categoria in Model.ListaCategorias)
                {
                    <option value="@categoria.ID_Categoria">@categoria.Nombre</option>
                }
            </select>
        </div>
        <div class="col-md-2 d-flex align-items-end">
            <button type="submit" class="btn btn-success w-100">Agregar</button>
        </div>
        <div class="col-md-3 d-flex align-items-end">
    <button type="button" class="btn btn-outline-secondary w-100" data-bs-toggle="modal" data-bs-target="#modalCantidadProductos">
        Agregar m√∫ltiples
    </button>
</div>

    </form>
<!-- Opciones de categor√≠as precargadas como plantilla -->
<div id="plantillaOpcionesCategorias" style="display:none;">
    @foreach (var categoria in Model.ListaCategorias)
    {
        <option value="@categoria.ID_Categoria">@categoria.Nombre</option>
    }
</div>

    <hr class="my-4" />

<!-- üß≠ T√≠tulo + Ordenar + Buscador -->
<div class="d-flex justify-content-between align-items-center flex-wrap mb-4 gap-3">

    <!-- T√≠tulo -->
    <h4 class="m-0 order-1">Productos Registrados</h4>

    <!-- Ordenar por (est√©tico) -->
    <div class="d-flex align-items-center gap-2 order-2">
        <label class="fw-bold m-0">Ordenar por:</label>
        <select class="form-select w-auto" disabled>
            <option selected>Selecciona una opci√≥n</option>
            <option>A-Z</option>
            <option>Z-A</option>
            <option>Precio: Menor a mayor</option>
            <option>Precio: Mayor a menor</option>
            <option>Stock: Bajo a alto</option>
            <option>Stock: Alto a bajo</option>
        </select>
    </div>

    <!-- Buscador -->
    <div class="order-3" style="flex-grow: 1; max-width: 500px;">
        <form class="input-group buscador-mejorado w-100" onsubmit="return false;">
            <input type="text" id="buscadorProductos" class="form-control" placeholder="Buscar por nombre o ID..." />
            <button type="button" class="btn btn-primary">
                <img src="~/icons/icon-search.svg" alt="Buscar" width="20" height="20" />
            </button>
        </form>
    </div>
</div>

<!-- üîΩ Botones de navegaci√≥n -->
<div class="mb-4 d-flex flex-wrap gap-2">
    <a class="btn btn-outline-danger" href="#">üîÑ Restablecer</a>

    <a class="btn btn-outline-warning" href="/Gerente/Inventario">üìä Inventario</a>
    <a class="btn btn-outline-info" href="/Gerente/Categorias">üóÇÔ∏è Categor√≠as</a>
    <a class="btn btn-outline-success" href="/Gerente/Entradas">üì• Entradas</a>
</div>



    <div class="tabla-con-scroll table-responsive">
        <table class="table table-striped table-bordered mt-3" id="tablaProductos">
            <thead class="table-dark">
                <tr>
                    <th onclick="ordenarPorColumnaProducto(0)">ID</th>
                    <th onclick="ordenarPorColumnaProducto(1)">Nombre</th>
                    <th onclick="ordenarPorColumnaProducto(2)">Categor√≠a</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var producto in Model.ListaProductos)
                {
                    <tr>
                        <td>@producto.ID_Producto</td>
                        <td>@producto.Nombre</td>
                        <td>@producto.NombreCategoria</td>
                        <td>
                            <button type="button" class="btn btn-danger btn-sm" onclick="confirmarEliminacionProducto('@producto.ID_Producto')">
                                üóëÔ∏è Eliminar
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<div class="modal fade" id="modalCantidadProductos" tabindex="-1" aria-labelledby="modalCantidadProductosLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalCantidadProductosLabel">¬øCu√°ntos productos quieres agregar?</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>
            <div class="modal-body">
                <input type="number" id="cantidadProductos" class="form-control" min="1" max="20" placeholder="Ej: 3">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" onclick="generarCamposProductos()">Continuar</button>
            </div>
        </div>
    </div>
</div>
<!-- MODAL: A√±adir m√∫ltiples productos -->
<div class="modal fade" id="modalCamposProductos" tabindex="-1" aria-labelledby="modalCamposProductosLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Agregar M√∫ltiples Productos</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <form id="formProductosMultiples" method="post" asp-page-handler="Multiples" >
            @Html.AntiForgeryToken()

          <div id="contenedorProductosDinamicos"></div>
          <div class="mt-3 d-flex justify-content-between">
            <button type="button" class="btn btn-outline-dark" onclick="agregarCampoProducto()">+ A√±adir otro producto</button>
            <div class="form-check">
              <input class="form-check-input" type="checkbox" id="noMostrarConfirmacionProductos">
              <label class="form-check-label">No mostrar confirmaci√≥n al guardar</label>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer justify-content-between">
        <button type="button" class="btn btn-outline-danger" data-bs-dismiss="modal">Cerrar</button>
        <button type="button" class="btn btn-success" onclick="confirmarEnvioProductos()">A√±adir</button>
      </div>
    </div>
  </div>
</div>

<!-- MODAL: Confirmaci√≥n antes de enviar -->
<div class="modal fade" id="modalConfirmacionProductos" tabindex="-1" aria-labelledby="modalConfirmacionProductosLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">¬øConfirmas que deseas a√±adir los siguientes productos?</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <ul id="listaProductosConfirmacion" class="list-group"></ul>
      </div>
      <div class="modal-footer justify-content-between">
        <button type="button" class="btn btn-outline-danger" data-bs-dismiss="modal">Cancelar</button>
        <button type="button" class="btn btn-success" id="btnConfirmarEnvioProductos">Confirmar</button>
      </div>
    </div>
  </div>
</div>



<!-- Modal Confirmaci√≥n de Eliminaci√≥n de Producto -->
<div class="modal fade" id="modalEliminarProducto" tabindex="-1" aria-labelledby="modalEliminarProductoLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content border-danger">
      <div class="modal-header bg-danger text-white">
        <h5 class="modal-title" id="modalEliminarProductoLabel">¬øEliminar producto?</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Cerrar"></button>
      </div>
      <div class="modal-body">
        Esta acci√≥n eliminar√° el producto y todos sus registros asociados (entradas, salidas e inventario).
        <div class="form-check mt-3">
          <input class="form-check-input" type="checkbox" id="noConfirmarEliminarProducto">
          <label class="form-check-label" for="noConfirmarEliminarProducto">
            No volver a mostrar esta confirmaci√≥n
          </label>
        </div>
      </div>
      <div class="modal-footer justify-content-between">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
        <button type="button" class="btn btn-danger" id="btnEliminarProductoConfirmado">Eliminar</button>
      </div>
    </div>
  </div>
</div>

@section Scripts {
    <script>
// ‚úÖ Script corregido para manejar m√∫ltiples productos con model binding autom√°tico
// ‚úÖ Script corregido para manejar m√∫ltiples productos con model binding autom√°tico
let noMostrarConfirmacionProductos = false;

function generarCamposProductos() {
    const cantidad = parseInt(document.getElementById("cantidadProductos").value);
    const contenedor = document.getElementById("contenedorProductosDinamicos");
    contenedor.innerHTML = "";

    if (isNaN(cantidad) || cantidad <= 0) {
        alert("‚ö†Ô∏è Ingresa una cantidad v√°lida (m√≠nimo 1).");
        return;
    }

    // ‚úÖ Asegurarse que se est√° insertando dentro del formulario
    if (!contenedor || !contenedor.closest("form")) {
        alert("‚ùå Error: los campos no est√°n dentro del formulario.");
        return;
    }

    // ‚úÖ Obtener las opciones de categor√≠a una sola vez
    const opcionesCategoria = obtenerOpcionesCategorias();

    for (let i = 0; i < cantidad; i++) {
        const row = document.createElement("div");
        row.className = "row gx-2 mb-3";

        row.innerHTML = `
            <div class="col-md-2">
                <label class="form-label">ID Producto</label>
                <input type="text" class="form-control id-producto" name="Productos[${i}].ID_Producto" placeholder="PRD00${i + 1}" required>
            </div>
            <div class="col-md-3">
                <label class="form-label">Nombre</label>
                <input type="text" class="form-control nombre-producto" name="Productos[${i}].Nombre" placeholder="Nombre del producto" required>
            </div>
            <div class="col-md-4">
                <label class="form-label">Descripci√≥n</label>
                <input type="text" class="form-control descripcion-producto" name="Productos[${i}].Descripcion" placeholder="Descripci√≥n del producto" required>
            </div>
            <div class="col-md-2">
                <label class="form-label">Categor√≠a</label>
                <select class="form-select categoria-producto" name="Productos[${i}].fkID_Categoria" required>
                    <option value="">Seleccionar...</option>
                    ${opcionesCategoria}
                </select>
            </div>
            <div class="col-md-1 d-flex align-items-end">
                <button type="button" class="btn btn-outline-danger btn-sm" onclick="eliminarFilaProducto(this)" title="Eliminar">
                    üóëÔ∏è
                </button>
            </div>
        `;
        contenedor.appendChild(row);
    }

    // ‚úÖ Ocultar modal de cantidad y mostrar campos
    bootstrap.Modal.getInstance(document.getElementById("modalCantidadProductos")).hide();
    new bootstrap.Modal(document.getElementById("modalCamposProductos")).show();
}


function agregarCampoProducto() {
    const contenedor = document.getElementById("contenedorProductosDinamicos");
    const numeroActual = contenedor.children.length;

    // ‚úÖ Asegurarse que se est√° insertando dentro del formulario
    if (!contenedor || !contenedor.closest("form")) {
        alert("‚ùå Error: los campos no est√°n dentro del formulario.");
        return;
    }

    // ‚úÖ Obtener las opciones de categor√≠a
    const opcionesCategoria = obtenerOpcionesCategorias();

    const row = document.createElement("div");
    row.className = "row gx-2 mb-3";

    row.innerHTML = `
        <div class="col-md-2">
            <label class="form-label">ID Producto</label>
            <input type="text" class="form-control id-producto" name="Productos[${numeroActual}].ID_Producto" placeholder="PRD${String(numeroActual + 1).padStart(3, '0')}" required>
        </div>
        <div class="col-md-3">
            <label class="form-label">Nombre</label>
            <input type="text" class="form-control nombre-producto" name="Productos[${numeroActual}].Nombre" placeholder="Nombre del producto" required>
        </div>
        <div class="col-md-4">
            <label class="form-label">Descripci√≥n</label>
            <input type="text" class="form-control descripcion-producto" name="Productos[${numeroActual}].Descripcion" placeholder="Descripci√≥n del producto" required>
        </div>
        <div class="col-md-2">
            <label class="form-label">Categor√≠a</label>
            <select class="form-select categoria-producto" name="Productos[${numeroActual}].fkID_Categoria" required>
                <option value="">Seleccionar...</option>
                ${opcionesCategoria}
            </select>
        </div>
        <div class="col-md-1 d-flex align-items-end">
            <button type="button" class="btn btn-outline-danger btn-sm" onclick="eliminarFilaProducto(this)" title="Eliminar">
                üóëÔ∏è
            </button>
        </div>
    `;

    contenedor.appendChild(row);
}


function eliminarFilaProducto(boton) {
    const fila = boton.closest('.row');
    const contenedor = document.getElementById("contenedorProductosDinamicos");
    
    fila.remove();
    
    // ‚úÖ Reindexar todos los campos despu√©s de eliminar
    reindexarCamposProductos();
    
    // Si no quedan filas, agregar una por defecto
    if (contenedor.children.length === 0) {
        agregarCampoProducto();
    }
}

// ‚úÖ NUEVA FUNCI√ìN: Reindexar campos para mantener √≠ndices consecutivos
function reindexarCamposProductos() {
    const contenedor = document.getElementById("contenedorProductosDinamicos");
    const filas = Array.from(contenedor.children);
    
    filas.forEach((fila, index) => {
        const inputs = fila.querySelectorAll('input, select');
        inputs.forEach(input => {
            const name = input.getAttribute('name');
            if (name && name.startsWith('Productos[')) {
                const newName = name.replace(/Productos\[\d+\]/, `Productos[${index}]`);
                input.setAttribute('name', newName);
            }
        });
    });
}

// ‚úÖ NUEVA FUNCI√ìN: Obtener opciones de categor√≠as como HTML
function obtenerOpcionesCategorias() {
    const plantilla = document.getElementById("plantillaOpcionesCategorias");
    if (plantilla) {
        return plantilla.innerHTML.trim();
    }
    console.warn('‚ö†Ô∏è No se encontr√≥ la plantilla de opciones de categor√≠as');
    return '';
}


// ‚úÖ NUEVA FUNCI√ìN: Cargar categor√≠as en todos los selects
// ‚úÖ FUNCI√ìN MEJORADA: Cargar categor√≠as en selects existentes
function cargarCategoriasEnSelects() {
    const opcionesHTML = obtenerOpcionesCategorias();
    
    if (!opcionesHTML) {
        console.warn('‚ö†Ô∏è No hay opciones de categor√≠a para cargar');
        return;
    }
    
    // Aplicar las opciones a todos los selects de productos m√∫ltiples
    const selectsMultiples = document.querySelectorAll('.categoria-producto');
    selectsMultiples.forEach(select => {
        select.innerHTML = '<option value="">Seleccionar...</option>' + opcionesHTML;
    });
    
    console.log(`‚úÖ Categor√≠as cargadas en ${selectsMultiples.length} selects`);
}

function confirmarEnvioProductos() {
    const contenedor = document.getElementById("contenedorProductosDinamicos");
    const filas = Array.from(contenedor.children);
    const lista = document.getElementById("listaProductosConfirmacion");

    lista.innerHTML = "";
    let validos = true;
    let productos = [];

    // Limpiar clases de error previas
    document.querySelectorAll('.is-invalid').forEach(input => {
        input.classList.remove('is-invalid');
    });

    filas.forEach((fila, index) => {
        const id = fila.querySelector(`input[name="Productos[${index}].ID_Producto"]`);
        const nombre = fila.querySelector(`input[name="Productos[${index}].Nombre"]`);
        const descripcion = fila.querySelector(`input[name="Productos[${index}].Descripcion"]`);
        const categoria = fila.querySelector(`select[name="Productos[${index}].fkID_Categoria"]`);

        // Validar campos vac√≠os
        if (!id.value.trim() || !nombre.value.trim() || !descripcion.value.trim() || !categoria.value) {
            if (!id.value.trim()) id.classList.add("is-invalid");
            if (!nombre.value.trim()) nombre.classList.add("is-invalid");
            if (!descripcion.value.trim()) descripcion.classList.add("is-invalid");
            if (!categoria.value) categoria.classList.add("is-invalid");
            
            validos = false;
            return;
        }

        // Buscar nombre de la categor√≠a para mostrar
        const categoriaTexto = categoria.options[categoria.selectedIndex].text;

        productos.push({ 
            id: id.value.trim(), 
            nombre: nombre.value.trim(), 
            descripcion: descripcion.value.trim(), 
            categoria: categoria.value,
            categoriaTexto: categoriaTexto
        });

        const li = document.createElement("li");
        li.className = "list-group-item";
        li.innerHTML = `
            <strong>üì¶ ${id.value.trim()}</strong> - ${nombre.value.trim()}<br>
            <small class="text-muted">${descripcion.value.trim()}</small><br>
            <span class="badge bg-secondary">${categoriaTexto}</span>
        `;
        lista.appendChild(li);
    });

    if (!validos) {
        alert("‚ö†Ô∏è Completa todos los campos marcados en rojo antes de continuar.");
        return;
    }

    if (productos.length === 0) {
        alert("‚ö†Ô∏è No hay productos v√°lidos para agregar.");
        return;
    }

    // Cerrar el modal de campos
    bootstrap.Modal.getInstance(document.getElementById("modalCamposProductos")).hide();

    // Verificar si mostrar confirmaci√≥n
    if (document.getElementById("noMostrarConfirmacionProductos").checked) {
        enviarProductos();
    } else {
        new bootstrap.Modal(document.getElementById("modalConfirmacionProductos")).show();

        // Configurar el bot√≥n de confirmaci√≥n
        document.getElementById("btnConfirmarEnvioProductos").onclick = () => {
            bootstrap.Modal.getInstance(document.getElementById("modalConfirmacionProductos")).hide();
            enviarProductos();
        };
    }
}

// ‚úÖ FUNCI√ìN SIMPLIFICADA: Usar el formulario existente
function enviarProductos() {
    const form = document.getElementById("formProductosMultiples");
    
    if (!form) {
        alert("‚ùå Error: No se encontr√≥ el formulario.");
        return;
    }

    // ‚úÖ El formulario ya tiene todos los campos con los nombres correctos
    form.submit();
}

// Limpiar campos cuando se cierra el modal
document.getElementById('modalCamposProductos').addEventListener('hidden.bs.modal', function () {
    document.getElementById("contenedorProductosDinamicos").innerHTML = "";
    document.getElementById("cantidadProductos").value = "";
});

// Resetear la cantidad cuando se cierra el primer modal
document.getElementById('modalCantidadProductos').addEventListener('hidden.bs.modal', function () {
    document.getElementById("cantidadProductos").value = "";
});

// ‚úÖ VERIFICACI√ìN: Asegurar que las categor√≠as est√©n disponibles al cargar la p√°gina
document.addEventListener('DOMContentLoaded', function() {
    // Verificar que el select principal de categor√≠as tenga opciones
    setTimeout(() => {
        const selectPrincipal = document.querySelector('select[asp-for="NuevoProducto.fkID_Categoria"]') ||
                               document.querySelector('form select[name*="fkID_Categoria"]:not(.categoria-producto)');
        
        if (selectPrincipal) {
            const opciones = Array.from(selectPrincipal.options).filter(option => option.value !== "");
            console.log(`‚úÖ Categor√≠as disponibles en el select principal: ${opciones.length}`);
            
            if (opciones.length === 0) {
                console.warn('‚ö†Ô∏è ADVERTENCIA: No se encontraron categor√≠as en el select principal');
            }
        } else {
            console.warn('‚ö†Ô∏è ADVERTENCIA: No se encontr√≥ el select principal de categor√≠as');
        }
    }, 100);
});
</script>
    <script>
        document.getElementById("buscadorProductos").addEventListener("input", function () {
            const filtro = this.value.toLowerCase();
            const filas = document.querySelectorAll("#tablaProductos tbody tr");

            filas.forEach(fila => {
                const texto = fila.textContent.toLowerCase();
                fila.style.display = texto.includes(filtro) ? "" : "none";
            });
        });

        function ordenarPorColumnaProducto(n) {
            const tabla = document.getElementById("tablaProductos");
            let switching = true, shouldSwitch, dir = "asc", switchcount = 0;

            while (switching) {
                switching = false;
                const rows = tabla.rows;

                for (let i = 1; i < rows.length - 1; i++) {
                    shouldSwitch = false;
                    let x = rows[i].getElementsByTagName("TD")[n];
                    let y = rows[i + 1].getElementsByTagName("TD")[n];

                    if ((dir === "asc" && x.innerText.toLowerCase() > y.innerText.toLowerCase()) ||
                        (dir === "desc" && x.innerText.toLowerCase() < y.innerText.toLowerCase())) {
                        shouldSwitch = true;
                        break;
                    }
                }

                if (shouldSwitch) {
                    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                    switching = true;
                    switchcount++;
                } else if (switchcount === 0 && dir === "asc") {
                    dir = "desc";
                    switching = true;
                }
            }
        }
    </script>
    <script>
let idProductoPendiente = null;
let omitirConfirmacionProducto = localStorage.getItem('noConfirmarEliminarProducto') === 'true';

function confirmarEliminacionProducto(idProducto) {
    if (omitirConfirmacionProducto) {
        ejecutarEliminacionProducto(idProducto);
        return;
    }

    idProductoPendiente = idProducto;
    new bootstrap.Modal(document.getElementById("modalEliminarProducto")).show();
}

document.addEventListener("DOMContentLoaded", () => {
    const btnEliminar = document.getElementById("btnEliminarProductoConfirmado");
    if (btnEliminar) {
        btnEliminar.addEventListener("click", () => {
            if (document.getElementById("noConfirmarEliminarProducto").checked) {
                localStorage.setItem("noConfirmarEliminarProducto", "true");
                omitirConfirmacionProducto = true;
            }

            bootstrap.Modal.getInstance(document.getElementById("modalEliminarProducto"))?.hide();
            ejecutarEliminacionProducto(idProductoPendiente);
        });
    }
});

function ejecutarEliminacionProducto(idProducto) {
    const form = document.createElement("form");
    form.method = "post";
    form.action = `/Gerente/ProductoSus?handler=Eliminar`;

    // Antiforgery token
    const token = document.querySelector('input[name="__RequestVerificationToken"]');
    if (token) {
        const tokenInput = document.createElement("input");
        tokenInput.type = "hidden";
        tokenInput.name = "__RequestVerificationToken";
        tokenInput.value = token.value;
        form.appendChild(tokenInput);
    }

    const idInput = document.createElement("input");
    idInput.type = "hidden";
    idInput.name = "id";
    idInput.value = idProducto;
    form.appendChild(idInput);

    document.body.appendChild(form);
    form.submit();
}
</script>

}
