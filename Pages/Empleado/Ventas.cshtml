@page
@model ProyectoProcesosExperienciaV1.Pages.Empleado.VentasModel
@{
    ViewData["Title"] = "Ventas de Productos";
}

<link rel="stylesheet" href="~/css/empleado-ventas.css" />

<!-- Toast Container -->
<div class="toast-container position-fixed top-0 start-50 translate-middle-x p-3" style="z-index: 3000;">
    @if (!string.IsNullOrEmpty(Model.MensajeExito))
    {
        <div class="toast align-items-center text-white bg-success border-0 show shadow animate__animated animate__fadeInDown" role="alert">
            <div class="d-flex">
                <div class="toast-body">
                    ‚úÖ @Model.MensajeExito
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Cerrar"></button>
            </div>
        </div>
    }
    @if (!string.IsNullOrEmpty(Model.MensajeError))
    {
        <div class="toast align-items-center text-white bg-danger border-0 show shadow animate__animated animate__fadeInDown" role="alert">
            <div class="d-flex">
                <div class="toast-body">
                    ‚ùå @Model.MensajeError
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Cerrar"></button>
            </div>
        </div>
    }
</div>

<div class="container mt-4">
    <!-- Breadcrumbs -->
    <nav aria-label="breadcrumb" class="breadcrumb-wrapper mb-3">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/Empleado/Dashboard">Inicio</a></li>
            <li class="breadcrumb-item active" aria-current="page">Ventas</li>
        </ol>
    </nav>

    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center flex-wrap gap-3 mb-4">
        <h2 class="m-0">Ventas de Productos</h2>
        <span class="badge bg-info fs-6">@Model.ProductosAgregados.Count producto(s)</span>
        
    </div>

<!-- Formulario para a√±adir producto -->
<form method="post" asp-page-handler="Agregar" class="row g-3 align-items-center mb-4">
    <!-- Campo ID del producto -->
    <div class="col-md-6">
        <label asp-for="ID_Producto" class="form-label">ID del Producto</label>
        <input asp-for="ID_Producto" class="form-control" placeholder="Ej: PRD001" />
        
        <!-- Sugerencia si no encuentra el producto -->
        <div class="form-text mt-1">
            <a href="/Empleado/Inventario" class="text-decoration-none text-primary fw-semibold">
                ¬øArt√≠culo no encontrado? Ir al Inventario
            </a>
        </div>

        <!-- Vista previa del producto -->
        <div id="previewProducto" class="card shadow-lg p-3 mt-2 d-none position-relative animate__animated animate__fadeIn">
            <button type="button" class="btn-close position-absolute top-0 end-0 m-2" id="cerrarPreview" aria-label="Cerrar"></button>
            <h5 id="previewNombre" class="mb-2 fw-bold"></h5>
            <p class="mb-1"><strong>Categor√≠a:</strong> <span id="previewCategoria"></span></p>
            <p class="mb-1"><strong>Descripci√≥n:</strong> <span id="previewDescripcion"></span></p>
            <p class="mb-1"><strong>Stock:</strong> <span id="previewStock"></span></p>
            <p class="mb-3"><strong>Precio:</strong> <span id="previewPrecio"></span></p>
            <div class="d-flex gap-2">
                <button type="button" class="btn btn-success btn-sm" id="btnAgregarPreview">Agregar al carrito</button>
                <button type="button" class="btn btn-outline-secondary btn-sm" id="btnDescartarPreview">Descartar</button>
            </div>
        </div>
    </div>

    <!-- Campo Cantidad -->
    <div class="col-md-3">
        <label asp-for="Cantidad" class="form-label">Cantidad</label>
        <input asp-for="Cantidad" class="form-control" type="number" min="1" placeholder="Ej: 2" />
        
        <!-- Sugerencia si no encuentra el producto -->
        <div class="form-text mt-1">
            <a href="/Empleado/Historial" class="text-decoration-none text-primary fw-semibold">
                Reclamaciones
            </a>
        </div>
    </div>

    <!-- Bot√≥n A√±adir -->
    <div class="col-md-3 d-flex align-items-center">
        <button type="submit" class="btn btn-success w-50">A√±adir</button>
        <div class="form-text mt-1">
            <a href="/Empleado/Inventario" class="text-decoration-none text-primary fw-semibold">-</a>
        </div>
        
    </div>
    
</form>

    <!-- Cantidad desplegable -->
    <div id="cantidadDesplegable" class="card shadow-sm p-3 mt-2 d-none animate__animated animate__fadeIn">
        <h6 class="fw-bold mb-2">¬øCu√°ntas unidades desea agregar?</h6>
        <label for="cantidadPreview" class="form-label">Cantidad</label>
        <input type="number" id="cantidadPreview" class="form-control mb-3" placeholder="Ej: 2" min="1" />

        <div class="d-flex gap-2">
            <button type="button" class="btn btn-primary btn-sm" id="btnConfirmarCantidad">Confirmar</button>
            <button type="button" class="btn btn-outline-secondary btn-sm" id="btnCancelarCantidad">Descartar</button>
        </div>
    </div>

    <!-- Tabla de productos a√±adidos -->
    @if (Model.ProductosAgregados.Any())
    {
        <div class="table-responsive">
            <table class="table table-bordered table-hover align-middle">
                <thead class="table-dark">
                    <tr>
                        <th>ID Producto</th>
                        <th>Nombre</th>
                        <th>Cantidad</th>
                        <th>Precio Venta</th>
                        <th>Subtotal</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var p in Model.ProductosAgregados)
                    {
                        <tr>
                            <td>@p.ID_Producto</td>
                            <td>@p.Nombre</td>
                            <td class="d-flex align-items-center gap-2">
                                <input type="number" class="form-control form-control-sm cantidad-input" 
                                       data-id="@p.ID_Producto" value="@p.StockActual" min="1" style="width: 70px;" />
                            </td>
                            <td>@p.PrecioVenta.ToString("C")</td>
                            <td>@((p.PrecioVenta * p.StockActual).ToString("C"))</td>
                            <td>
                                <button type="button" 
                                        class="btn btn-danger btn-sm btn-eliminar"
                                        data-id="@p.ID_Producto"
                                        data-nombre="@p.Nombre">
                                    üóë Eliminar
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr class="fw-bold">
                        <td colspan="4" class="text-end">Total:</td>
                        <td>@Model.TotalVenta.ToString("C")</td>
                        <td></td>
                    </tr>
                </tfoot>
            </table>
        </div>

        <!-- Formulario vaciar carrito -->
        <form method="post" asp-page-handler="Vaciar" id="formVaciar" class="text-end mt-3">
            <button type="button" class="btn btn-outline-danger" id="btnVaciarCarrito">
                üóë Vaciar carrito
            </button>
        </form>

        <!-- Bot√≥n confirmar venta -->
        <div class="text-center mt-3">
            <button type="button" class="btn btn-primary btn-lg" data-bs-toggle="modal" data-bs-target="#modalTicketVenta">
                Confirmar Venta
            </button>
        </div>
    }

    <!-- Formularios ocultos -->
    <form method="post" asp-page-handler="ActualizarCantidad" id="formActualizarCantidad">
        <input type="hidden" name="ID_Actualizar" id="inputActualizarID" />
        <input type="hidden" name="NuevaCantidad" id="inputActualizarCantidad" />
    </form>
</div>

<!-- Modal Confirmaci√≥n Vaciar Carrito -->
<div class="modal fade" id="modalVaciarCarrito" tabindex="-1" aria-labelledby="modalVaciarCarritoLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-0 shadow-lg rounded-4 animate__animated animate__fadeIn">
            <div class="modal-header bg-danger text-white rounded-top-4">
                <h5 class="modal-title fw-bold" id="modalVaciarCarritoLabel">¬øVaciar carrito?</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>
            <div class="modal-body">
                <p>Se eliminar√°n todos los productos del carrito.</p>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="noMostrarVaciarCheck">
                    <label class="form-check-label" for="noMostrarVaciarCheck">
                        No volver a mostrar esta advertencia
                    </label>
                </div>
            </div>
            <div class="modal-footer d-flex justify-content-end gap-2">
                <form method="post" asp-page-handler="Vaciar" id="formVaciarConfirmado">
                    <button type="submit" class="btn btn-danger">üóë S√≠, vaciar</button>
                </form>
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancelar</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal Venta Exitosa -->
<div class="modal fade" id="modalVentaExitosa" tabindex="-1" aria-labelledby="modalVentaExitosaLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-0 shadow-lg rounded-4 animate__animated animate__fadeIn">
            <div class="modal-header bg-success text-white rounded-top-4">
                <h5 class="modal-title fw-bold" id="modalVentaExitosaLabel">‚úÖ ¬°Venta Realizada con √âxito!</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>
            <div class="modal-body text-center">
                <div class="mb-3">
                    <i class="fas fa-check-circle text-success" style="font-size: 4rem;"></i>
                </div>
                <h4 class="text-success mb-3">Venta Completada</h4>
                <p class="mb-0">El ticket ha sido descargado exitosamente.</p>
                <p class="text-muted">Puedes proceder con una nueva venta.</p>
                
                <!-- Contador visual -->
                <div class="mt-3">
                    <div class="d-flex justify-content-center align-items-center gap-2">
                        <span class="text-muted">Auto cierre en:</span>
                        <span id="countdown" class="badge bg-secondary fs-6">10</span>
                        <span class="text-muted">segundos</span>
                    </div>
                    <div class="progress mt-2" style="height: 4px;">
                        <div id="progress-bar" class="progress-bar bg-success" style="width: 100%"></div>
                    </div>
                </div>
            </div>
            <div class="modal-footer justify-content-center">
                <button type="button" class="btn btn-success" data-bs-dismiss="modal" id="btnContinuar">Continuar</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal Confirmaci√≥n Eliminar -->
<div class="modal fade" id="modalEliminar" tabindex="-1" aria-labelledby="modalEliminarLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-0 shadow-lg rounded-4 animate__animated animate__fadeIn">
            <div class="modal-header bg-danger text-white rounded-top-4">
                <h5 class="modal-title fw-bold" id="modalEliminarLabel">¬øEliminar producto?</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>
            <div class="modal-body">
                <p id="textoModalEliminar" class="mb-0">¬øEst√°s seguro de eliminar este producto del carrito?</p>
            </div>
            <div class="modal-footer d-flex justify-content-end gap-2">
                <form method="post" asp-page-handler="Eliminar" id="formEliminarConfirmado">
                    <input type="hidden" name="id" id="inputIdEliminar" />
                    <button type="submit" class="btn btn-danger">üóë S√≠, eliminar</button>
                </form>
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancelar</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal Ticket de Venta -->
<div class="modal fade" id="modalTicketVenta" tabindex="-1" aria-labelledby="modalTicketLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content border-0 shadow-lg rounded-4">
            <div class="modal-header bg-primary text-white rounded-top-4">
                <h5 class="modal-title fw-bold" id="modalTicketLabel">üßæ Confirmar Venta</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>
            <div class="modal-body">
                <div id="contenidoTicket" class="px-3 py-2">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h4 class="m-0 fw-bold">ManaSys</h4>
                        <small>@(Model.MostrarTicket ? Model.FechaVenta.ToString("dd/MM/yyyy HH:mm") : DateTime.Now.ToString("dd/MM/yyyy HH:mm"))</small>
                    </div>
                    <p><strong>Empleado:</strong> Juan Perez</p>
                    <p><strong>Fecha de Venta:</strong> @(Model.MostrarTicket ? Model.FechaVenta.ToString("dd/MM/yyyy") : DateTime.Now.ToString("dd/MM/yyyy"))</p>

                    <table class="table table-bordered table-hover align-middle mt-3">
                        <thead class="table-light">
                            <tr>
                                <th>ID Salida</th>
                                <th>ID Producto</th>
                                <th>Nombre</th>
                                <th>Cantidad</th>
                                <th>Precio</th>
                                <th>Subtotal</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.MostrarTicket && Model.ProductosTicket.Any())
                            {
                                @foreach (var p in Model.ProductosTicket)
                                {
                                    <tr>
                                        <td><strong>@p.ID_Salida</strong></td>
                                        <td>@p.ID_Producto</td>
                                        <td>@p.NombreProducto</td>
                                        <td>@p.Cantidad</td>
                                        <td>@p.PrecioVenta.ToString("C")</td>
                                        <td>@p.Subtotal.ToString("C")</td>
                                    </tr>
                                }
                            }
                            else
                            {
                                @foreach (var p in Model.ProductosAgregados)
                                {
                                    <tr>
                                        <td><em>Pendiente</em></td>
                                        <td>@p.ID_Producto</td>
                                        <td>@p.Nombre</td>
                                        <td>@p.StockActual</td>
                                        <td>@p.PrecioVenta.ToString("C")</td>
                                        <td>@(p.StockActual * p.PrecioVenta).ToString("C")</td>
                                    </tr>
                                }
                            }
                        </tbody>
                        <tfoot>
                            <tr class="fw-bold">
                                <td colspan="5" class="text-end">Total:</td>
                                <td>@Model.TotalVenta.ToString("C")</td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
            <div class="modal-footer d-flex justify-content-between flex-wrap">
                @if (Model.MostrarTicket)
                {
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" id="btnCerrarTicket">Cerrar</button>
                }
                else
                {
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <form method="post" asp-page-handler="Confirmar" class="d-inline">
                        <button type="submit" class="btn btn-success">‚úÖ Confirmar y Registrar Venta</button>
                    </form>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>
    <partial name="_ValidationScriptsPartial" />

    <!-- Bootstrap Toasts -->
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            document.querySelectorAll('.toast').forEach(toastEl => {
                const toast = new bootstrap.Toast(toastEl, { delay: 3000 });
                toast.show();
            });
        });
    </script>

    <!-- Vista previa del producto -->
    <script>
        const inputID = document.querySelector('#ID_Producto');
        const inputCantidad = document.querySelector('#Cantidad');
        const form = document.querySelector('form[method="post"]');

        const previewCard = document.getElementById('previewProducto');
        const cantidadCard = document.getElementById('cantidadDesplegable');

        const previewNombre = document.getElementById('previewNombre');
        const previewCategoria = document.getElementById('previewCategoria');
        const previewDescripcion = document.getElementById('previewDescripcion');
        const previewStock = document.getElementById('previewStock');
        const previewPrecio = document.getElementById('previewPrecio');

        const btnAgregar = document.getElementById('btnAgregarPreview');
        const btnDescartar = document.getElementById('btnDescartarPreview');
        const btnCerrar = document.getElementById('cerrarPreview');
        const btnConfirmarCantidad = document.getElementById('btnConfirmarCantidad');
        const btnCancelarCantidad = document.getElementById('btnCancelarCantidad');
        const inputCantidadPreview = document.getElementById('cantidadPreview');

        let timeoutID;

        if (inputID) {
            inputID.addEventListener('input', async () => {
                const id = inputID.value.trim();

                if (!id) {
                    previewCard?.classList.add('d-none');
                    cantidadCard?.classList.add('d-none');
                    return;
                }

                try {
                    const response = await fetch(`?handler=ObtenerProducto&id=${encodeURIComponent(id)}`);
                    const data = await response.json();

                    if (!data) {
                        previewCard?.classList.add('d-none');
                        cantidadCard?.classList.add('d-none');
                        return;
                    }

                    previewNombre.textContent = data.nombre;
                    previewCategoria.textContent = data.nombreCategoria;
                    previewDescripcion.textContent = data.descripcion;
                    previewStock.textContent = data.stockActual;
                    previewPrecio.textContent = data.precioVenta;

                    previewCard?.setAttribute('data-id-producto', id);
                    previewCard?.classList.remove('d-none');
                    cantidadCard?.classList.add('d-none');

                    clearTimeout(timeoutID);
                    timeoutID = setTimeout(() => previewCard?.classList.add('d-none'), 20000);
                } catch (error) {
                    console.error('Error al obtener producto:', error);
                    previewCard?.classList.add('d-none');
                    cantidadCard?.classList.add('d-none');
                }
            });
        }

        btnAgregar?.addEventListener('click', () => {
            previewCard?.classList.add('d-none');
            cantidadCard?.classList.remove('d-none');
            inputCantidadPreview?.focus();
        });

        btnCancelarCantidad?.addEventListener('click', () => {
            cantidadCard?.classList.add('d-none');
            inputCantidadPreview.value = '';
        });

        btnConfirmarCantidad?.addEventListener('click', () => {
            const cantidad = parseInt(inputCantidadPreview.value);
            if (isNaN(cantidad) || cantidad <= 0) {
                alert('‚ö†Ô∏è Ingrese una cantidad v√°lida');
                return;
            }

            inputID.value = previewCard.getAttribute('data-id-producto');
            inputCantidad.value = cantidad;
            form.submit();
        });

        btnDescartar?.addEventListener('click', () => previewCard?.classList.add('d-none'));
        btnCerrar?.addEventListener('click', () => previewCard?.classList.add('d-none'));
    </script>

    <!-- Actualizaci√≥n de cantidad en tabla -->
    <script>
        document.querySelectorAll('.cantidad-input').forEach(input => {
            input.addEventListener('change', () => {
                const id = input.dataset.id;
                const cantidad = parseInt(input.value);

                if (isNaN(cantidad) || cantidad <= 0) {
                    alert("‚ö†Ô∏è Ingrese una cantidad v√°lida");
                    return;
                }

                const idField = document.getElementById('inputActualizarID');
                const cantidadField = document.getElementById('inputActualizarCantidad');
                const formActualizar = document.getElementById('formActualizarCantidad');

                if (idField && cantidadField && formActualizar) {
                    idField.value = id;
                    cantidadField.value = cantidad;
                    formActualizar.submit();
                }
            });
        });
    </script>

    <!-- Modal de eliminaci√≥n -->
    <script>
        document.querySelectorAll('.btn-eliminar').forEach(btn => {
            btn.addEventListener('click', () => {
                const id = btn.dataset.id;
                const nombre = btn.dataset.nombre;

                const input = document.getElementById('inputIdEliminar');
                const texto = document.getElementById('textoModalEliminar');
                const modalEl = document.getElementById('modalEliminar');

                if (input && texto && modalEl) {
                    input.value = id;
                    texto.textContent = `¬øEst√°s seguro de eliminar "${nombre}" del carrito?`;
                    new bootstrap.Modal(modalEl).show();
                }
            });
        });
    </script>

    <!-- Confirmaci√≥n vaciar carrito -->
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const btnVaciar = document.getElementById('btnVaciarCarrito');
            const checkbox = document.getElementById('noMostrarVaciarCheck');
            const formVaciar = document.getElementById('formVaciarConfirmado');
            const modalVaciar = document.getElementById('modalVaciarCarrito');

            if (btnVaciar && formVaciar && modalVaciar) {
                btnVaciar.addEventListener('click', () => {
                    const noMostrar = localStorage.getItem('noMostrarVaciarCarrito');
                    if (noMostrar === 'true') {
                        formVaciar.submit();
                    } else {
                        new bootstrap.Modal(modalVaciar).show();
                    }
                });

                formVaciar.addEventListener('submit', () => {
                    if (checkbox && checkbox.checked) {
                        localStorage.setItem('noMostrarVaciarCarrito', 'true');
                    }
                });
            }
        });
    </script>

    <!-- SCRIPTS MEJORADOS PARA MANEJO DE TICKETS -->
    <script>
        // ========== SCRIPT PRINCIPAL MEJORADO ==========
        document.addEventListener("DOMContentLoaded", function () {
            var mostrar = '@Model.MostrarTicket'.toLowerCase() === 'true';
            if (mostrar) {
                var modal = new bootstrap.Modal(document.getElementById('modalTicketVenta'));
                modal.show();
                
                // Mostrar contador en el ticket
                mostrarContadorTicket();
                
                // Auto generar PDF despu√©s de 10 segundos
                setTimeout(() => {
                    descargarTicketPDF().then(() => {
                        // Cerrar modal del ticket y mostrar modal de √©xito
                        modal.hide();
                        setTimeout(() => {
                            mostrarModalExito();
                        }, 500);
                    });
                }, 10000); // 10 segundos
            }
        });

        // ========== FUNCI√ìN UNIFICADA PARA DESCARGAR PDF ==========
        function descargarTicketPDF() {
            return new Promise((resolve, reject) => {
                const contenido = document.getElementById('contenidoTicket');
                if (!contenido) {
                    console.error('No se encontr√≥ el contenido del ticket');
                    reject('Contenido no encontrado');
                    return;
                }

                // Mostrar indicador de descarga
                mostrarIndicadorDescarga();

                const options = {
                    filename: `ticket-venta-${new Date().getTime()}.pdf`,
                    margin: [10, 10, 10, 10],
                    image: { type: 'jpeg', quality: 0.98 },
                    html2canvas: { 
                        scale: 2,
                        useCORS: true,
                        allowTaint: true,
                        logging: false
                    },
                    jsPDF: { 
                        unit: 'mm', 
                        format: 'a4', 
                        orientation: 'portrait' 
                    }
                };

                html2pdf()
                    .set(options)
                    .from(contenido)
                    .save()
                    .then(() => {
                        console.log('PDF descargado exitosamente');
                        ocultarIndicadorDescarga();
                        resolve();
                    })
                    .catch((error) => {
                        console.error('Error al generar PDF:', error);
                        ocultarIndicadorDescarga();
                        // A√∫n as√≠ resolvemos para continuar con el flujo
                        resolve();
                    });
            });
        }

        // ========== INDICADOR DE DESCARGA ==========
        function mostrarIndicadorDescarga() {
            // Crear overlay de descarga si no existe
            if (!document.getElementById('descarga-overlay')) {
                const overlay = document.createElement('div');
                overlay.id = 'descarga-overlay';
                overlay.style.cssText = `
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background: rgba(0,0,0,0.7);
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    z-index: 9999;
                    color: white;
                    font-size: 18px;
                `;
                overlay.innerHTML = `
                    <div class="text-center">
                        <div class="spinner-border text-light mb-3" role="status"></div>
                        <div>Generando PDF...</div>
                        <small class="text-muted">Por favor espere</small>
                    </div>
                `;
                document.body.appendChild(overlay);
            }
            document.getElementById('descarga-overlay').style.display = 'flex';
        }

        function ocultarIndicadorDescarga() {
            const overlay = document.getElementById('descarga-overlay');
            if (overlay) {
                overlay.style.display = 'none';
            }
        }

        // ========== CONTADOR EN MODAL DE TICKET ==========
        function mostrarContadorTicket() {
            const modalFooter = document.querySelector('#modalTicketVenta .modal-footer');
            if (modalFooter && !document.getElementById('ticket-contador')) {
                const contadorDiv = document.createElement('div');
                contadorDiv.id = 'ticket-contador';
                contadorDiv.className = 'text-center w-100 mb-3';
                contadorDiv.innerHTML = `
                    <div class="alert alert-info mb-3">
                        <div class="d-flex justify-content-center align-items-center gap-2 mb-2">
                            <i class="fas fa-download"></i>
                            <span>PDF se descargar√° autom√°ticamente en:</span>
                            <span id="ticket-countdown" class="badge bg-primary fs-5 px-3 py-2">10</span>
                            <span>segundos</span>
                        </div>
                        <div class="progress" style="height: 8px;">
                            <div id="ticket-progress-bar" class="progress-bar bg-primary progress-bar-striped progress-bar-animated" style="width: 100%"></div>
                        </div>
                        <small class="text-muted d-block mt-2">
                            <i class="fas fa-info-circle"></i> 
                            Tambi√©n puede descargar manualmente usando el bot√≥n "Cerrar"
                        </small>
                    </div>
                `;
                
                modalFooter.insertBefore(contadorDiv, modalFooter.firstChild);

                // Iniciar contador
                iniciarContadorTicket();
            }
        }

        function iniciarContadorTicket() {
            let timeLeft = 10;
            const countdownEl = document.getElementById('ticket-countdown');
            const progressBarEl = document.getElementById('ticket-progress-bar');

            const ticketInterval = setInterval(() => {
                timeLeft--;
                if (countdownEl) countdownEl.textContent = timeLeft;
                
                // Actualizar barra de progreso
                const progressPercent = (timeLeft / 10) * 100;
                if (progressBarEl) progressBarEl.style.width = progressPercent + '%';

                // Cambiar color cuando quedan pocos segundos
                if (timeLeft <= 3) {
                    if (countdownEl) countdownEl.className = 'badge bg-warning fs-5 px-3 py-2';
                    if (progressBarEl) progressBarEl.className = 'progress-bar bg-warning progress-bar-striped progress-bar-animated';
                }

                if (timeLeft <= 0) {
                    clearInterval(ticketInterval);
                }
            }, 1000);

            // Limpiar contador si se cierra manualmente
            document.getElementById('modalTicketVenta').addEventListener('hidden.bs.modal', function() {
                clearInterval(ticketInterval);
            });

            // Guardar referencia del intervalo para poder cancelarlo
            window.ticketCountdownInterval = ticketInterval;
        }

// ========== MANEJO DEL BOT√ìN CERRAR TICKET ==========
document.addEventListener('DOMContentLoaded', function() {
    const btnCerrarTicket = document.getElementById('btnCerrarTicket');
    if (btnCerrarTicket) {
        btnCerrarTicket.addEventListener('click', function() {
            // Cancelar contador autom√°tico si est√° corriendo
            if (window.ticketCountdownInterval) {
                clearInterval(window.ticketCountdownInterval);
            }
            
            // Descargar PDF manualmente
            descargarTicketPDF().then(() => {
                // Cerrar modal del ticket
                const modal = bootstrap.Modal.getInstance(document.getElementById('modalTicketVenta'));
                if (modal) {
                    modal.hide();
                }
                
                // Mostrar modal de √©xito despu√©s de cerrar
                setTimeout(() => {
                    mostrarModalExito();
                }, 500);
            }).catch((error) => {
                console.error('Error al descargar PDF:', error);
                // A√∫n as√≠ cerrar el modal y continuar
                const modal = bootstrap.Modal.getInstance(document.getElementById('modalTicketVenta'));
                if (modal) {
                    modal.hide();
                }
                
                setTimeout(() => {
                    mostrarModalExito();
                }, 500);
            });
        });
    }
});

// ========== FUNCI√ìN PARA MOSTRAR MODAL DE √âXITO ==========
function mostrarModalExito() {
    const modalExito = new bootstrap.Modal(document.getElementById('modalVentaExitosa'));
    modalExito.show();

    // Inicializar contador y barra de progreso
    let timeLeft = 10;
    const countdownEl = document.getElementById('countdown');
    const progressBarEl = document.getElementById('progress-bar');
    const btnContinuar = document.getElementById('btnContinuar');

    const exitoInterval = setInterval(() => {
        timeLeft--;
        if (countdownEl) countdownEl.textContent = timeLeft;
        
        // Actualizar barra de progreso
        const progressPercent = (timeLeft / 10) * 100;
        if (progressBarEl) progressBarEl.style.width = progressPercent + '%';

        if (timeLeft <= 0) {
            clearInterval(exitoInterval);
            modalExito.hide();
            
            // Limpiar y recargar despu√©s de cerrar
            setTimeout(() => {
                limpiarYRecargar();
            }, 500);
        }
    }, 1000);

    // Permitir cerrar manualmente
    if (btnContinuar) {
        btnContinuar.addEventListener('click', function() {
            clearInterval(exitoInterval);
            modalExito.hide();
            
            // Limpiar y recargar al cerrar manualmente
            setTimeout(() => {
                limpiarYRecargar();
            }, 500);
        });
    }

    // Tambi√©n limpiar al cerrar con X o ESC
    document.getElementById('modalVentaExitosa').addEventListener('hidden.bs.modal', function() {
        clearInterval(exitoInterval);
        setTimeout(() => {
            limpiarYRecargar();
        }, 500);
    });
}

// ========== FUNCIONES DE LIMPIEZA Y RECARGA ==========
function limpiarDatosTicket() {
    // Hacer una petici√≥n AJAX para limpiar los datos del ticket en el servidor
    return fetch(window.location.pathname + '?handler=LimpiarTicket', {
        method: 'POST',
        headers: {
            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || '',
            'Content-Type': 'application/json',
        }
    }).then(response => {
        if (response.ok) {
            console.log('Datos del ticket limpiados correctamente');
            return true;
        }
        throw new Error('Error al limpiar ticket');
    }).catch(error => {
        console.error('Error al limpiar ticket:', error);
        return false;
    });
}

function vaciarCarritoCompleto() {
    // Hacer una petici√≥n AJAX para vaciar el carrito completamente
    return fetch(window.location.pathname + '?handler=VaciarCarritoCompleto', {
        method: 'POST',
        headers: {
            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || '',
            'Content-Type': 'application/json',
        }
    }).then(response => {
        if (response.ok) {
            console.log('Carrito vaciado correctamente');
            return true;
        }
        throw new Error('Error al vaciar carrito');
    }).catch(error => {
        console.error('Error al vaciar carrito:', error);
        return false;
    });
}

function limpiarYRecargar() {
    // Ejecutar ambas operaciones de limpieza
    Promise.all([
        limpiarDatosTicket(),
        vaciarCarritoCompleto()
    ]).then(() => {
        // Recargar la p√°gina para mostrar el formulario completamente limpio
        window.location.reload();
    }).catch(() => {
        // Si falla alguna operaci√≥n, usar limpieza forzada
        console.log('Usando limpieza forzada como respaldo');
        forzarLimpieza();
    });
}

function forzarLimpieza() {
    // Limpiar campos del formulario manualmente
    const idProducto = document.getElementById('ID_Producto');
    const cantidad = document.getElementById('Cantidad');
    
    if (idProducto) idProducto.value = '';
    if (cantidad) cantidad.value = '';
    
    // Ocultar previews
    const previewCard = document.getElementById('previewProducto');
    const cantidadCard = document.getElementById('cantidadDesplegable');
    
    if (previewCard) previewCard.classList.add('d-none');
    if (cantidadCard) cantidadCard.classList.add('d-none');
    
    // Recargar despu√©s de un momento
    setTimeout(() => {
        window.location.href = window.location.pathname;
    }, 1000);
}

// ========== VERIFICACIONES DE ESTADO AL CARGAR ==========
document.addEventListener("DOMContentLoaded", function() {
    // Verificar si hay un estado inconsistente (ticket mostrado sin productos)
    const mostrarTicket = '@Model.MostrarTicket'.toLowerCase() === 'true';
    const tieneProductos = @Model.ProductosAgregados.Count > 0;
    
    if (mostrarTicket && !tieneProductos) {
        console.log('Estado inconsistente detectado, limpiando autom√°ticamente...');
        setTimeout(() => {
            forzarLimpieza();
        }, 2000);
    }
    
    // Interceptar cierre manual del modal de ticket para asegurar limpieza
    const modalTicket = document.getElementById('modalTicketVenta');
    if (modalTicket) {
        modalTicket.addEventListener('hidden.bs.modal', function() {
            if (mostrarTicket) {
                setTimeout(() => {
                    limpiarYRecargar();
                }, 500);
            }
        });
    }
});

// ========== MANEJO DE ERRORES GLOBALES ==========
window.addEventListener('error', function(e) {
    if (e.message.includes('html2pdf') || e.message.includes('PDF')) {
        console.error('Error relacionado con PDF:', e.message);
        // Continuar con el flujo normal sin PDF si hay errores
        setTimeout(() => {
            const modalTicket = bootstrap.Modal.getInstance(document.getElementById('modalTicketVenta'));
            if (modalTicket) {
                modalTicket.hide();
                setTimeout(() => {
                    mostrarModalExito();
                }, 500);
            }
        }, 1000);
    }
});

// ========== FUNCI√ìN DE UTILIDAD PARA DEBUG ==========
function debugEstadoTicket() {
    console.log('=== DEBUG ESTADO TICKET ===');
    console.log('MostrarTicket:', '@Model.MostrarTicket');
    console.log('Productos en carrito:', @Model.ProductosAgregados.Count);
    console.log('Modal ticket visible:', !document.getElementById('modalTicketVenta').classList.contains('d-none'));
    console.log('Contador activo:', !!window.ticketCountdownInterval);
    
    // Informaci√≥n adicional opcional
    const modal = document.getElementById('modalTicketVenta');
    if (modal) {
        console.log('Clases del modal:', modal.className);
    }
    
    console.log('============================');
}  // <-- Solo esta llave de cierre
</script>
}  
